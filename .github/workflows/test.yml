name: "Build Anixpkgs"
on:
  pull_request:
  push:
    branches:
      - master

env:
  NIXOS_VERSION: 24.05

jobs:
  lint:
    name: Lint Nix Files
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - run: >
        nix-shell -p nixfmt --run "bash scripts/lint.sh check"
  check-flake-lock:
    name: Check Flake Lock Sync
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ssh-key: ${{ secrets.ANIXBOT_DEPLOY_KEY }}
        fetch-depth: 0
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - run: |
        branch=${{ github.head_ref || github.ref_name }}
        git config user.name "goromal (bot)"
        git config user.email "goromal.bot@gmail.com"
        git checkout origin $branch
        git pull origin $branch
        python scripts/update_deps.py
        num_changes=$(git status --porcelain=v1 2>/dev/null | wc -l)
        if [[ $num_changes -ge 1 ]]; then
          echo "Committing changes to flake lock"
          git add .
          git commit -m "Update flake lock"
          git push origin $branch
        else
          echo "No lock changes to commit"
        fi
        nix flake lock --no-update-lock-file
  check-deps:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - run: |
        num_side_branches=$(python scripts/check_deps.py | wc -l)
        if [[ $num_side_branches -ge 1 ]]; then
          echo "ERROR: Detected $num_side_branches dependencies on a side branch"
          exit 1
        else
          echo "No dependencies detected on a side branch"
        fi
  envs:
    name: Build Environments
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - run: ./scripts/build_envs.sh
  cpp:
    name: C++ Packages
    needs: envs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - run: ./scripts/build_pkgs.sh cpp
  rust:
    name: Rust Packages
    needs: envs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - run: ./scripts/build_pkgs.sh rust
  python:
    name: Python Packages
    needs: cpp
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - run: ./scripts/build_pkgs.sh python
  bash:
    name: Bash Packages
    needs: python
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - run: ./scripts/build_pkgs.sh bash
  java:
    name: Java Packages
    needs: envs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - run: ./scripts/build_pkgs.sh java
  generate-docs-dry:
    name: Generate Docs (Dry Run)
    needs:
    - cpp
    - rust
    - python
    - bash
    - java
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: |
        NIXPKGS_ALLOW_UNFREE=1 python scripts/generate_docs.py
        num_changes=$(git status --porcelain=v1 2>/dev/null | wc -l)
        if [[ $num_changes -ge 1 ]]; then
          echo "Found changes to $num_changes docs"
        else
          echo "No detected changes to auto-generated docs"
        fi
  regression:
    name: Regression Tests
    needs:
    - cpp
    - rust
    - python
    - bash
    - java
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        cd test && nix-shell --run "bash test.sh"
  machines:
    name: Machine Checks
    needs:
    - cpp
    - rust
    - python
    - bash
    - java
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v25
      with:
        nix_path: nixpkgs=channel:nixos-${{ env.NIXOS_VERSION }}
    - uses: cachix/cachix-action@v14
      with:
        name: github-public
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: >
        bash scripts/check_machines.sh
